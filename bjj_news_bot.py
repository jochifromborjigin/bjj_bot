# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import feedparser
import random
import schedule
import requests
import nest_asyncio
from datetime import datetime
from telegram.ext import Application

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è Jupyter
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
TELEGRAM_BOT_TOKEN = '7611379154:AAHZ_0MS34zrt3BTkl3unT4byKHTfVkdh6E'
TELEGRAM_CHANNEL_ID = '@bjjdailynews'
YOUTUBE_API_KEY = 'AIzaSyA0Y6oa9EmsOjHfLR1IrEPtYCWUiz2Vuks'

TOPICS_FILE = 'topics.txt'
FEEDS_FILE = 'feeds.txt'
QUOTES_FILE = 'quotes.txt'
USED_LINKS_FILE = 'used_links.txt'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def load_used_links():
    try:
        with open(USED_LINKS_FILE, 'r') as f:
            return set(f.read().splitlines())
    except FileNotFoundError:
        return set()

def save_used_link(link):
    with open(USED_LINKS_FILE, 'a') as f:
        f.write(link + '\n')

used_links = load_used_links()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º –Ω–µ–¥–µ–ª–∏
with open(TOPICS_FILE, 'r') as f:
    topics = [line.strip() for line in f.readlines()]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç
with open(QUOTES_FILE, 'r') as f:
    quotes = [line.strip() for line in f.readlines()]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –Ω–µ–¥–µ–ª–∏
week_number = datetime.utcnow().isocalendar()[1]
current_topic = topics[(week_number - 1) % len(topics)]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏
def find_article(topic, used_links):
    with open(FEEDS_FILE, 'r') as f:
        feed_urls = f.read().splitlines()

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–µ–º–µ
    for url in feed_urls:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if topic.lower() in entry.title.lower() and entry.link not in used_links:
                return entry.link, entry.title

    # –ò—â–µ–º –ª—é–±—É—é —Å—Ç–∞—Ç—å—é
    for url in feed_urls:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if entry.link not in used_links:
                return entry.link, entry.title

    return None, None

# –ü–æ–∏—Å–∫ –ø–æ–¥–∫–∞—Å—Ç–∞
def find_podcast(topic, used_links):
    with open(FEEDS_FILE, 'r') as f:
        feed_urls = f.read().splitlines()

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–¥–∫–∞—Å—Ç –ø–æ —Ç–µ–º–µ
    for url in feed_urls:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if ('podcast' in entry.title.lower() or 'episode' in entry.title.lower()) and topic.lower() in entry.title.lower() and entry.link not in used_links:
                return entry.link, entry.title

    # –ò—â–µ–º –ª—é–±–æ–π –ø–æ–¥–∫–∞—Å—Ç
    for url in feed_urls:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if ('podcast' in entry.title.lower() or 'episode' in entry.title.lower()) and entry.link not in used_links:
                return entry.link, entry.title

    return None, None

# –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ YouTube API
def find_video(topic, used_links):
    search_url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&q={topic} BJJ&type=video&key={YOUTUBE_API_KEY}&maxResults=5"
    response = requests.get(search_url).json()

    if 'items' in response:
        for item in response['items']:
            video_id = item['id']['videoId']
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            video_title = item['snippet']['title']
            if video_url not in used_links:
                return video_url, video_title

    # –ò—â–µ–º –ª—é–±–æ–π BJJ-–≤–∏–¥–µ–æ, –µ—Å–ª–∏ –ø–æ —Ç–µ–º–µ –Ω–µ—Ç
    fallback_url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&q=BJJ&type=video&key={YOUTUBE_API_KEY}&maxResults=5"
    fallback_response = requests.get(fallback_url).json()

    if 'items' in fallback_response:
        for item in fallback_response['items']:
            video_id = item['id']['videoId']
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            video_title = item['snippet']['title']
            if video_url not in used_links:
                return video_url, video_title

    return None, None


# –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç: —Å—Ç–∞—Ç—å—è –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞
async def send_morning_post():
    article_link, article_title = find_article(current_topic, used_links)
    if article_link:
        text = f"üåÖ Good morning, warriors!\n\nToday's focus: *{current_topic}*\n\nüìñ Article: [{article_title}]({article_link})\n\nStay strong and keep learning! üí™ #BJJ"
        save_used_link(article_link)
    else:
        quote = random.choice(quotes)
        text = f"üåÖ Good morning, warriors!\n\n*Motivational thought:*\n\n_{quote}_\n\n#BJJ #Mindset"

    await application.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=text, parse_mode="Markdown")

# –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç: –ø–æ–¥–∫–∞—Å—Ç –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞
async def send_afternoon_post():
    podcast_link, podcast_title = find_podcast(current_topic, used_links)
    if podcast_link:
        text = f"üéß Midday learning time!\n\nTopic: *{current_topic}*\n\nüéôÔ∏è Podcast: [{podcast_title}]({podcast_link})\n\nSharpen your mind while you rest! üß† #BJJ"
        save_used_link(podcast_link)
    else:
        quote = random.choice(quotes)
        text = f"üéß Midday break inspiration!\n\n*Quote:*\n\n_{quote}_\n\n#BJJ #Inspiration"

    await application.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=text, parse_mode="Markdown")

# –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç: –≤–∏–¥–µ–æ –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞
async def send_evening_post():
    video_link, video_title = find_video(current_topic, used_links)
    if video_link:
        text = f"üåô Night drilling!\n\nFocus: *{current_topic}*\n\nüé• Video: [{video_title}]({video_link})\n\nVisualize. Drill. Improve! üî• #BJJ"
        save_used_link(video_link)
    else:
        quote = random.choice(quotes)
        text = f"üåô Night inspiration!\n\n*Reflection:*\n\n_{quote}_\n\n#BJJ #Philosophy"

    await application.bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=text, parse_mode="Markdown")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
schedule.every().day.at("08:00").do(lambda: asyncio.ensure_future(send_morning_post()))
schedule.every().day.at("14:00").do(lambda: asyncio.ensure_future(send_afternoon_post()))
schedule.every().day.at("20:00").do(lambda: asyncio.ensure_future(send_evening_post()))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def scheduler_loop():
    while True:
        schedule.run_pending()
        await asyncio.sleep(10)

async def main():
    await application.initialize()
    await application.start()
    print(f"ü§ñ BJJ Daily News Bot is running! Current topic: {current_topic}")
    await scheduler_loop()

await main()
